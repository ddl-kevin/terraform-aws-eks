#! /usr/bin/env bash

RED="\e[31m"
GREEN="\e[32m"
EC="\e[0m"

open_ssh_tunnel_to_k8s_api() {
  printf "$GREEN Setting up mallory k8s tunnel... $EC \n"
  if [[ -z "$https_proxy" ]]; then
    MALLORY_PORT=${mallory_port}
    https_proxy=http://localhost:$MALLORY_PORT
    export https_proxy
  fi
  eval ${k8s_tunnel_command} && sleep 3
  echo
}

check_kubeconfig() {
  KUBECONFIG="${kubeconfig_path}"
  printf "$GREEN Checking if $KUBECONFIG exists... $EC \n"
  if test -f "$KUBECONFIG"; then
    echo "$KUBECONFIG exists." && export KUBECONFIG
  else
    echo "$KUBECONFIG does not exist." && exit 1
  fi
  echo
}

set_k8s_auth() {
  AWS_AUTH_YAML="${aws_auth_yaml}"
  if test -f "$AWS_AUTH_YAML"; then
    printf "$GREEN Updating $AWS_AUTH_YAML... $EC \n"
    kubectl apply -f "$AWS_AUTH_YAML"
  else
    printf "$RED $AWS_AUTH_YAML does not exist. $EC \n" && exit 1
  fi
  echo
}

install_calico() {
  CALICO_OPERATOR_YAML_URL=${calico_operator_url}
  printf "$GREEN Installing Calico Operator $EC \n"
  kubectl apply -f $CALICO_OPERATOR_YAML_URL || printf "$RED There was an error installing the calico operator"
  echo
  CALICO_CRD_YAML_URL=${calico_custom_resources_url}
  printf "$GREEN Installing Calico Custom resources $EC \n" || printf "$RED There was an error installing the calico CRD"
  kubectl apply -f $CALICO_CRD_YAML_URL
  echo
}

kubectl_apply() {
  k8s_manifest="$1"
  if test -f "$k8s_manifest"; then
    echo "Applying $k8s_manifest..."
    kubectl apply -f $k8s_manifest
  else
    printf "$RED $k8s_manifest does not exist. $EC \n" && exit 1
  fi

  kubectl apply -f "$k8s_manifest"
}

close_ssh_tunnel_to_k8s_api() {
  printf "$GREEN Shutting down mallory k8s tunnel ${mallory_container_name} ... $EC"
  docker kill "${mallory_container_name}"
  docker rm "${mallory_container_name}" || true
  echo
}

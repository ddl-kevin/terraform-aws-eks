#! /usr/bin/env bash

RED="\e[31m"
GREEN="\e[32m"
EC="\e[0m"

open_ssh_tunnel_to_k8s_api() {
  printf "$GREEN Setting up mallory k8s tunnel... $EC \n"
  if [[ -z "$https_proxy" ]]; then
    MALLORY_PORT=${mallory_port}
    https_proxy=http://localhost:$MALLORY_PORT
    export https_proxy
  fi
  eval ${k8s_tunnel_command} && sleep 3
  echo
}

check_kubeconfig() {
  KUBECONFIG="${kubeconfig_path}"
  printf "$GREEN Checking if $KUBECONFIG exists... $EC \n"
  if test -f "$KUBECONFIG"; then
    echo "$KUBECONFIG exists." && export KUBECONFIG
  else
    echo "$KUBECONFIG does not exist." && exit 1
  fi
  echo
}

set_k8s_auth() {\
  AWS_AUTH_YAML="${aws_auth_yaml}"
  if test -f "$AWS_AUTH_YAML"; then
    printf "$GREEN Updating $AWS_AUTH_YAML... $EC \n"
    kubectl apply -f "$AWS_AUTH_YAML"
  else
    printf "$RED $AWS_AUTH_YAML does not exist. $EC \n" && exit 1
  fi
  echo
}

install_calico() {
  CALICO_OPERATOR_YAML_URL=${calico_operator_url}
  printf "$GREEN Installing Calico Operator $EC \n"
  kubectl apply -f $CALICO_OPERATOR_YAML_URL || printf "$RED There was an error installing the calico operator"
  echo
  CALICO_CRD_YAML_URL=${calico_custom_resources_url}
  printf "$GREEN Installing Calico Custom resources $EC \n" || printf "$RED There was an error installing the calico CRD"
  kubectl apply -f $CALICO_CRD_YAML_URL
  echo
}


create_namespace() {
  namespace=$1
  printf "$GREEN Creating namespace $namespace $EC \n"
  kubectl create namespace $namespace --dry-run=client --save-config -o yaml | kubectl apply -f -
  echo
}

helm_install() {
  HELM_REPO=${domino_helm_repo}
  printf "$RED Make sure you are authenticated with $HELM_REPO $EC \n"
  chart_name=$1
  chart_version=$2
  namespace=$3

  printf "$GREEN Installing helm-chart:$chart_name version:$chart_version $EC \n"

  helm_command="helm upgrade --install $chart_name $HELM_REPO/$chart_name --version $chart_version --namespace $namespace"
  echo "$helm_command"
  eval "$helm_command"
}

kubectl_apply() {
  k8s_manifest="$1"
  if test -f "$k8s_manifest"; then
    echo "Applying $k8s_manifest..."
    kubectl apply -f $k8s_manifest
  else
    printf "$RED $k8s_manifest does not exist. $EC \n" && exit 1
  fi

  kubectl apply -f "$k8s_manifest"
}

create_namespaces() {
  %{~ for namespace in domino_namespaces ~}
  create_namespace ${namespace}
  %{~ endfor }
  echo
}

install_helm_charts() {
  %{~ for chart in helm_charts ~}
  helm_install ${chart.name} ${chart.version} ${domino_namespaces_map[chart.namespace]}
  %{~ endfor }
  echo
}

# create_storage_classes() {
#   echo "Creating storageclasses..."

#   %{~ for manifest in domino_storage_classes_filenames ~}
#   kubectl_apply ${manifest}
#   %{~ endfor }
#   echo
# }

create_persistent_volumes() {
  printf "$GREEN Creating persistent-volumes... $EC \n"

  %{~ for manifest in domino_persistent_volume_filenames ~}
  kubectl_apply ${manifest}
  %{~ endfor }
  echo
}
create_persistent_volume_claims() {
  printf "$GREEN Creating persistent-volume-claims... $EC \n"

  %{~ for manifest in domino_persistent_volume_claims_filenames ~}
  kubectl_apply ${manifest}
  %{~ endfor }
  echo
}
create_persistent_storage() {
  create_persistent_volumes && create_persistent_volume_claims
}

close_ssh_tunnel_to_k8s_api() {
  printf "$GREEN Shutting down mallory k8s tunnel ${mallory_container_name} ... $EC"
  docker kill "${mallory_container_name}"
  docker rm "${mallory_container_name}" || true
  echo
}

create_docker_cred_secret() {
  printf "$GREEN Creating domino-quay-repos secret (for domino docker repo pullImageSecret)... $EC"
  kubectl create secret \
    docker-registry \
    -o yaml --dry-run=client --save-config \
    --docker-server=quay.io \
    --docker-username=$QUAY_USERNAME \
    --docker-password=$QUAY_PASSWORD \
    --docker-email=. ${domino_docker_pull_secret_name} | kubectl apply -f -

  echo
}

create_domino_cm() {
  printf "$GREEN Creating configmap for fleetcommand configuration(${domino_config_filename})... $EC"
  kubectl create configmap \
  -o yaml --dry-run=client --save-config \
  fleetcommand-agent-config \
  --from-file=${domino_config_filename} | kubectl apply -f -
  echo
}



main() {
  open_ssh_tunnel_to_k8s_api
  check_kubeconfig
  set_k8s_auth
  # create_namespaces
  # create_docker_cred_secret
  # create_persistent_storage
  install_calico
  # create_domino_cm
  # install_helm_charts
}

trap close_ssh_tunnel_to_k8s_api EXIT
main
